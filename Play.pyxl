Play
════════════════════════════════════════════════════════════════════════

let pos = xy(½ SCREEN_SIZE.x, 132)
let flip = xy(1, 1)

let width = 96
let height = 96
let cellSize = 16
let grid = CreateCave(width, height, 0.2, 0.6)
let frame = 0
let tile_rules = {
    0: cave_tileset_sprite[4][1],
    1: cave_tileset_sprite[6][1],
    2: cave_tileset_sprite[6][0],
    3: cave_tileset_sprite[3][1],
    4: cave_tileset_sprite[1][3],
    5: cave_tileset_sprite[2][2],
    6: cave_tileset_sprite[2][0],
    7: cave_tileset_sprite[2][1],
    8: cave_tileset_sprite[0][3],
    9: cave_tileset_sprite[0][2],
    10: cave_tileset_sprite[0][0],
    11: cave_tileset_sprite[0][1],
    12: cave_tileset_sprite[4][0],
    13: cave_tileset_sprite[1][2],
    14: cave_tileset_sprite[1][0],
    15: cave_tileset_sprite[1][1],
}
let cameraX = 0
let cameraY = 0
    
frame
────────────────────────────────────────────────────────────────────────

frame++

set_background(rgb(20%, 50%, 80%))

draw_text(font, "Noise Caves", xy(½ SCREEN_SIZE.x, SCREEN_SIZE.y - 20), rgba(1,1,1,1), ∅, ∅, 0, 0)

/*for 0 <= y < height:
    for 0 <= x < width:
        let v = grid[y * width + x]
        let c = rgba(0,0,0,1)
        if (v == 1): c = rgba(1,0,0,1)
        if (v == 2): c = rgba(1,1,0,1)
        if (v == 3): c = rgba(0,1,0,1)
        if (v == 4): c = rgba(0,1,1,1)
        if (v == 5): c = rgba(0,0,1,1)
        if (v == 6): c = rgba(1,0,1,1)
        if (v == 7): c = rgba(1,0.5,0,1)
        if (v == 8): c = rgba(0.5,0.5,0,1)
        if (v == 9): c = rgba(0,0.5,0,1)
        if (v == 10): c = rgba(0,0.5,0.5,1)
        if (v == 11): c = rgba(0,0.5,1,1)
        if (v == 12): c = rgba(0.5,0.0,0.5,1)
        if (v == 13): c = rgba(0.5,0.5,0.5,1)
        
        draw_corner_rect(xy(x*cellSize, y*cellSize), xy(cellSize, cellSize), c)*/



let exit = false
for 0 <= y < height:
    for 0 <= x < width:
        let tile = ∅ 
        let k = 0
        if (grid[y * width + x] == 0):
            k = 0
        else:
            k = 0
            if (y > 0): k += grid[(y - 1) * width + x] << 0
            if (y < (height - 1)): k += grid[(y + 1) * width + x] << 1
            else: k += 1 << 1
            if (x > 0): k += grid[y * width + x - 1] << 2
            else: k += 1 << 2
            if (x < (width - 1)): k += grid[y * width + x + 1] << 3
            else: k += 1 << 3
                
        tile = tile_rules[k]
        if (tile ≠ ∅):
            draw_sprite(tile, xy((x + 0.5) * cellSize + cameraX, (y + 0.5) * cellSize + cameraY))
        else:
            debug_print("Can't find rule", k, "for coord", x, y)
            exit = true
            break
    if (exit):
        break
    
let cameraMove = gamepad_array[0].xy

cameraX -= cameraMove.x * 2
cameraY -= cameraMove.y * 2
        